@using Signum.Entities.Reflection
@using Signum.Engine
@using Signum.Engine.Help
@using Signum.Web.Help
@using Signum.Web.Extensions
@using Signum.Entities.DynamicQuery
@using Signum.Entities.Basics
@using Signum.Entities.Help
@using Signum.Engine.Basics
@section head
{
    @Html.ScriptCss("~/help/Content/help.css")
}

@{ 
    EntityHelp eh = (EntityHelp)Model;
    ViewBag.Title = eh.Type.NiceName();
}

@helper WriteProperty(Node<Tuple<PropertyHelp, TypeElementContext<PropertyRouteHelpDN>>> node, string entityName)
{
    PropertyHelp ph = node.Value.Item1;
    using (var ctx = node.Value.Item2)
    {
    @Html.HiddenRuntimeInfo(ctx)
    
    <dt id="@HelpUrls.IdProperty(ph.PropertyRoute)">@ph.PropertyInfo.NiceName() <code class='shortcut'>[p:@entityName.@(ph.PropertyRoute.PropertyString())]</code></dt>
    <dd>
        <span class="info">
            @Html.WikiParse(ph.Info, HelpWiki.DefaultWikiSettings)
        </span>
        @Html.Hidden(ctx.SubContextPrefix(a => a.Property), ctx.Value.Property.Path)
        @Html.TextArea(ctx.SubContextPrefix(a => a.Description), ph.UserDescription, new { @class = "editable" })
        <span class="wiki">@Html.WikiParse(ph.UserDescription, HelpWiki.DefaultWikiSettings)</span>
    </dd>
        if (node.Children.Count > 0)
        {
    <h4 class="embedded">@ph.PropertyInfo.NiceName()</h4>
    <dl class="embedded">
        @foreach (var v in node.Children)
        {
            @WriteProperty(v, entityName);
        }
    </dl>
        }
    }
}


<div class="row">
    <div class="col-md-9">
        @using (TypeContext<EntityHelpDN> ec = new TypeContext<EntityHelpDN>(eh.Entity.Value, null))
        {
            var name = Navigator.ResolveWebTypeName(eh.Type);
            ec.FormGroupStyle = FormGroupStyle.None;


            using (Html.BeginForm((HelpController hc) => hc.SaveEntity(), new { id = "form-save" }))
            {
            @Html.HiddenRuntimeInfo(ec)
            @Html.HiddenRuntimeInfo(ec, e => e.Culture)
            @Html.HiddenRuntimeInfo(ec, e => e.Type)
                if (!Navigator.IsReadOnly(typeof(EntityHelpDN)))
                {
                    Html.RenderPartial(HelpClient.Buttons);
                }
            <div class="edit-container">
                <h1 title="@eh.Type.Namespace">@eh.Type.NiceName()</h1>
                <code class='shortcut'>[e:@name]</code>
                <span class="info">
                    @Html.WikiParse(eh.Info, HelpWiki.DefaultWikiSettings)
                </span>
                @Html.TextArea(ec.SubContextPrefix(a => a.Description), eh.Description, 5, 80, new { @class = "editable" })
                <span class="wiki">
                    @Html.WikiParse(eh.Description, HelpWiki.DefaultWikiSettings)
                </span>
            </div>
            <div id="entityContent" class="help_left">
                @{
                var allowedProps = eh.Properties.Where(a => a.Value.IsAllowed() == null).ToDictionary();
                }

                @if (allowedProps.Any())
                {
                    <div id="properties">
                        <h2 class="greyTitle">@Html.PropertyNiceName(() => eh.Entity.Value.Properties)</h2>
                        @{ 
                    var elementContexts = ec.TypeElementContext(e => e.Properties).ToDictionary(a => a.Value.Property.Path);

                    var tuplesDic = allowedProps.Values.Select(p => Tuple.Create(p, elementContexts.GetOrThrow(p.PropertyRoute.PropertyString()))).ToDictionary(a => a.Item1.PropertyRoute);

                    var roots = TreeHelper.ToTreeC(tuplesDic.Values, kvp =>
                    {
                        var parent = kvp.Item1.PropertyRoute.Parent;
                        if (parent.PropertyRouteType == PropertyRouteType.Root || parent.PropertyRouteType == PropertyRouteType.Mixin)
                            return null;

                        if (parent.PropertyRouteType == PropertyRouteType.MListItems)
                            parent = parent.Parent;

                        return tuplesDic.GetOrThrow(parent);
                    });
                        }

                        <dl class="dl-horizontal">
                            @foreach (var node in roots)
                            {
                                @WriteProperty(node, name);
                            }
                        </dl>
                    </div>
                }

                @{
                var allowedOperations = eh.Operations.Where(a => a.Value.IsAllowed() == null).ToDictionary();
                }

                @if (allowedOperations.Any())
                {
                    var operations = ec.TypeElementContext(e => e.Operations).ToDictionary(a => a.Value.Operation);
                         
                    <div id="operations">
                        <h2 class="greyTitle">@Html.PropertyNiceName(() => eh.Entity.Value.Operations)</h2>
                        <dl class="dl-horizontal">
                            @foreach (var op in allowedOperations)
                            {
                                using (TypeElementContext<OperationHelpDN> ctx = operations.GetOrThrow(op.Key))
                                {
                                <dt id="@HelpUrls.IdOperation(op.Key)">@op.Key.NiceToString()<code class='shortcut'>[o:@op.Key.Key]</code></dt>
                                <dd>
                                    <span class="info">
                                        @Html.WikiParse(op.Value.Info, HelpWiki.DefaultWikiSettings)
                                    </span>
                                    @Html.HiddenRuntimeInfo(ctx)
                                    @Html.HiddenRuntimeInfo(ctx, e => e.Culture)
                                    @Html.HiddenRuntimeInfo(ctx, a => a.Operation)
                                    @Html.TextArea(ctx.SubContextPrefix(a => a.Description), op.Value.UserDescription, new { @class = "editable" })
                                    <span class="wiki">
                                        @Html.WikiParse(op.Value.UserDescription, HelpWiki.DefaultWikiSettings)
                                    </span>
                                </dd>
                                }
                            }
                        </dl>
                    </div>
                }

                @{
                var allowedQueries = eh.Queries.Where(a => a.Value.IsAllowed() == null).ToDictionary();
                }

                @if (allowedQueries.Any())
                {
                    var queries = ec.TypeElementContext(e => e.Queries).ToDictionary(a => a.Value.Query);
                        
                    <div id="queries">
                        <h2 class="greyTitle">@typeof(QueryDN).NicePluralName()</h2>
                        @foreach (var mq in allowedQueries)
                        {
                            using (TypeElementContext<QueryHelpDN> qctx = queries.GetOrThrow(QueryLogic.GetQuery(mq.Key)))
                            {
                                        
                            @Html.HiddenRuntimeInfo(qctx) 
                            @Html.HiddenRuntimeInfo(qctx, e => e.Culture)                                   
                            @Html.HiddenRuntimeInfo(qctx, a => a.Query)                                    
                            <h3 id="@HelpUrls.IdQuery(mq.Key)">@QueryUtils.GetNiceName(mq.Key)</h3>
                            <div class="queryName">
                                <code class='shortcut'>[q:@QueryUtils.GetQueryUniqueKey(mq.Key)]</code>
                                <span class="info">
                                    @Html.WikiParse(mq.Value.Info, HelpWiki.DefaultWikiSettings)
                                </span>
                                @Html.TextArea(qctx.SubContextPrefix(a => a.Description), mq.Value.UserDescription, new { @class = "editable" })
                                <span class="wiki">
                                    @Html.WikiParse(mq.Value.UserDescription, HelpWiki.DefaultWikiSettings)
                                </span>
                            </div>

                                var allowedColumn = mq.Value.Columns.Where(a => a.Value.IsAllowed() == null);                               
                                if (allowedColumn.Any())
                                {
                                    var columns = qctx.TypeElementContext(a => a.Columns).ToDictionary(a => a.Value.ColumnName);
                                    
                            <dl class="dl-horizontal columns">
                                @foreach (var qc in allowedColumn)
                                {
                                    using (var ctx = columns.GetOrThrow(qc.Value.Column.Name))
                                    {
                                    @Html.HiddenRuntimeInfo(ctx)     
                                    <dt>@qc.Value.NiceName</dt>
                                    <dd>
                                        <span class="info">
                                            @Html.WikiParse(qc.Value.Info, HelpWiki.DefaultWikiSettings)
                                        </span>
                                        @Html.Hidden(ctx.SubContextPrefix(a => a.ColumnName), ctx.Value.ColumnName)
                                        @Html.TextArea(ctx.SubContextPrefix(a => a.Description), ctx.Value.Description, new { @class = "editable" })
                                        <span class="wiki">
                                            @Html.WikiParse(qc.Value.UserDescription, HelpWiki.DefaultWikiSettings)
                                        </span>
                                    </dd>
                                    }
                                }
                            </dl>
                                }
                            }

                        }
                    </div>
                }
            </div>
            }
        }
    </div>

    <div class="col-md-3">
        @{ Html.RenderPartial(HelpClient.MiniMenu, new ViewDataDictionary { { "type", eh.Type } });}
    </div>
</div>
