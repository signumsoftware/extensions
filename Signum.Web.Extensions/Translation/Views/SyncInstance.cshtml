@model TypeInstancesChanges
@using System.Globalization
@using System.Reflection
@using Signum.Utilities
@using Signum.Web.Translation
@using Signum.Web.Translation.Controllers
@using Signum.Engine.Translation
@using Signum.Entities.Translation
@{
    CultureInfo culture = ViewBag.Culture;

    ViewBag.Title = TranslationMessage.Synchronize0In1.NiceToString().FormatWith(Model.Type.NiceName(), culture.DisplayName);

    int totalInstances = ViewBag.TotalInstances;

    if (Model.Instances.Count < totalInstances)
    {
        ViewBag.Title = ViewBag.Title + " [{0}/{1}]".FormatWith(Model.Instances.Count, totalInstances);
    }
}

@Html.ScriptsJs("~/Translation/resources/" + CultureInfo.CurrentCulture.Name + ".js")
@Html.ScriptCss("~/Translation/Content/Translation.css")

@if (Model.Instances.IsEmpty())
{
    <h2>@TranslationMessage._0AlreadySynchronized.NiceToString().FormatWith(@Model.Type.NiceName())</h2>   
}
else
{
    <h2>@ViewBag.Title</h2>

    using (Html.BeginForm((TranslatedInstanceController c) => c.SaveSync(Signum.Engine.Basics.TypeLogic.GetCleanName(Model.Type), culture.Name)))
    {
    <table id="results" style="width: 100%; margin: 0px" class="st"        
        data-feedback="@Url.Action("Feedback", "Translation")" 
        data-culture="@culture.Name">
        @foreach (InstanceChanges instance in Model.Instances)
        {
            <thead>
                <tr>
                    <th class="leftCell">@TranslationMessage.Instance.NiceToString()</th>
                    <th class="titleCell">@Html.Href(Navigator.NavigateRoute(instance.Instance), instance.Instance.ToString())</th>
                </tr>
            </thead>
           
            foreach (var route in instance.RouteConflicts.OrderBy(a=>a.Key.ToString()))
            {
                var propertyString = route.Key.ToString();
            <tr>
                <th class="leftCell">@TranslationMessage.Property.NiceToString()
                </th>
                <th>@propertyString</th>
            </tr>
                foreach (var mc in route.Value)
                {
            <tr>
                <td class="leftCell">@mc.Key.Name</td>
                <td class="monospaceCell">
                    @if (mc.Key.Equals(TranslatedInstanceLogic.DefaultCulture()))
                    {
                        string originalName = TranslatedInstanceLogic.DefaultCulture().Name + "#" + instance.Instance.Key() + "#" + propertyString;
                        <textarea name="@originalName" style="display:none" >@mc.Value.Original</textarea>
                    }

                    @if (mc.Value.OldOriginal != null)
                    {
                        <pre>@TranslationClient.Diff(mc.Value.OldOriginal, mc.Value.Original)</pre>
                    }
                    else if(TranslatedInstanceLogic.RouteType(route.Key.Route).Value == TraducibleRouteType.Html)
                    {
                        <pre>@mc.Value.Original</pre>
                    }
                    else
                    {
                        <pre>@mc.Value.Original</pre>   
                    }
                </td>
            </tr>
                }
            <tr>
                <td class="leftCell">@culture.Name</td>
                <td class="monospaceCell">
                    @{  
                var translations = route.Value.Where(kvp => kvp.Value.OldTranslation != null)
                    .Select(kvp => new SelectListItem { Text = "old translation - " + kvp.Value.OldTranslation, Value = kvp.Value.OldTranslation })
                    .Concat(route.Value.Select(kvp => new SelectListItem { Text = "from " + kvp.Key + " - " + kvp.Value.AutomaticTranslation, Value = kvp.Value.AutomaticTranslation }))
                    .ToList();

                string elementName = culture.Name + "#" + instance.Instance.Key() + "#" + propertyString;
                if (translations.Count() == 1)
                {       
                        <textarea name="@(elementName)_original" style="display:none" disabled="disabled">@translations.First().Value</textarea>
                        <textarea name="@elementName" style="width:90%" data-original="@translations.First().Value">@translations.First().Value</textarea>
                    if (TranslationClient.Translator is ITranslatorWithFeedback)
                    {
                        <button class="rememberChange">@TranslationJavascriptMessage.RememberChange.NiceToString()</button>
                    }
                }
                else
                {
                    if (translations.Count() > 1 && translations.Select(a => a.Value).Distinct().Count() == 1)
                    {
                        translations.First().Selected = true;
                        translations.Insert(0, new SelectListItem { Value = "", Text = "-" });
                    }
                    else
                    {
                        translations.Insert(0, new SelectListItem { Value = "", Text = "-", Selected = true });
                    }
                    
                        @Html.DropDownList(elementName, translations);
                        <a href="#" class="edit">@TranslationMessage.Edit.NiceToString()</a>
                }
                    }
                </td>
            </tr>
            }
        }
    </table>
    <input type="submit" value="@TranslationMessage.Save.NiceToString()" />
    }
}

<script>
    $(function () {
        @(TranslationClient.Module["editAndRemember"](TranslationClient.Translator is ITranslatorWithFeedback))
        @(TranslationClient.Module["fixTextAreas"]())
    });
</script>
