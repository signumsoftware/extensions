#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Signum.Web.Extensions.Translation.Views
{
    using System;
    using System.Collections.Generic;
    
    #line 2 "..\..\Translation\Views\View.cshtml"
    using System.Globalization;
    
    #line default
    #line hidden
    using System.IO;
    using System.Linq;
    using System.Net;
    
    #line 3 "..\..\Translation\Views\View.cshtml"
    using System.Reflection;
    
    #line default
    #line hidden
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using Signum.Entities;
    
    #line 6 "..\..\Translation\Views\View.cshtml"
    using Signum.Entities.Translation;
    
    #line default
    #line hidden
    
    #line 4 "..\..\Translation\Views\View.cshtml"
    using Signum.Utilities;
    
    #line default
    #line hidden
    using Signum.Web;
    
    #line 5 "..\..\Translation\Views\View.cshtml"
    using Signum.Web.Translation.Controllers;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Translation/Views/View.cshtml")]
    public partial class View : System.Web.Mvc.WebViewPage<Dictionary<CultureInfo, LocalizedAssembly>>
    {
        public View()
        {
        }
        public override void Execute()
        {
            
            #line 7 "..\..\Translation\Views\View.cshtml"
  
    CultureInfo culture = ViewBag.Culture;
    CultureInfo defaultCulture = ViewBag.DefaultCulture;
    Assembly assembly = ViewBag.Assembly;

    ViewBag.Title = TranslationMessage.View0In1.NiceToString().Formato(assembly.GetName().Name, culture == null ? TranslationMessage.AllLanguages.NiceToString() : culture.DisplayName);

    Func<CultureInfo, bool> editCulture = c => culture == null || culture.Name == c.Name;

    Func<LocalizedType, string> locKey = lt => lt.Type.Name + "." + lt.Assembly.Culture.Name;

            
            #line default
            #line hidden
WriteLiteral("\r\n");

            
            #line 18 "..\..\Translation\Views\View.cshtml"
Write(Html.ScriptCss("~/Translation/Content/Translation.css"));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n<h2>");

            
            #line 20 "..\..\Translation\Views\View.cshtml"
Write(ViewBag.Title);

            
            #line default
            #line hidden
WriteLiteral("</h2>\r\n\r\n<div>\r\n");

            
            #line 23 "..\..\Translation\Views\View.cshtml"
    
            
            #line default
            #line hidden
            
            #line 23 "..\..\Translation\Views\View.cshtml"
     using (Html.BeginForm("View", "Translation", FormMethod.Get))
    {
        
            
            #line default
            #line hidden
            
            #line 25 "..\..\Translation\Views\View.cshtml"
   Write(Html.Hidden("assembly"));

            
            #line default
            #line hidden
            
            #line 25 "..\..\Translation\Views\View.cshtml"
                                
        
            
            #line default
            #line hidden
            
            #line 26 "..\..\Translation\Views\View.cshtml"
   Write(Html.Hidden("culture"));

            
            #line default
            #line hidden
            
            #line 26 "..\..\Translation\Views\View.cshtml"
                               
        
            
            #line default
            #line hidden
            
            #line 27 "..\..\Translation\Views\View.cshtml"
   Write(Html.TextBox("filter", (string)ViewBag.Filter));

            
            #line default
            #line hidden
            
            #line 27 "..\..\Translation\Views\View.cshtml"
                                                       ;
        

            
            #line default
            #line hidden
WriteLiteral("        <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"searchPressed\"");

WriteLiteral(" value=\"true\"");

WriteLiteral(" />\r\n");

WriteLiteral("        <input");

WriteLiteral(" type=\"submit\"");

WriteAttribute("value", Tuple.Create(" value=\"", 1139), Tuple.Create("\"", 1188)
            
            #line 30 "..\..\Translation\Views\View.cshtml"
, Tuple.Create(Tuple.Create("", 1147), Tuple.Create<System.Object, System.Int32>(TranslationMessage.Search.NiceToString()
            
            #line default
            #line hidden
, 1147), false)
);

WriteLiteral(" />\r\n");

            
            #line 31 "..\..\Translation\Views\View.cshtml"
    }

            
            #line default
            #line hidden
WriteLiteral("</div>\r\n\r\n");

            
            #line 34 "..\..\Translation\Views\View.cshtml"
 if (Model == null)
{

            
            #line default
            #line hidden
WriteLiteral("    <em>");

            
            #line 36 "..\..\Translation\Views\View.cshtml"
   Write(TranslationMessage.PressSearchForResults.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("</em>\r\n");

            
            #line 37 "..\..\Translation\Views\View.cshtml"
}
else
{
    var defaultLocAssembly = Model.GetOrThrow(defaultCulture);
    var filter = (string)ViewBag.Filter;
    var all = string.IsNullOrEmpty(filter);

    var types = defaultLocAssembly.Types.Values.Where(lt => all || Model.Values.Any(la => la.Types[lt.Type].Contains(filter))).ToList();

    if (types.IsEmpty())
    {

            
            #line default
            #line hidden
WriteLiteral("    <strong>");

            
            #line 48 "..\..\Translation\Views\View.cshtml"
       Write(TranslationMessage.NoResultsFound.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("</strong>\r\n");

            
            #line 49 "..\..\Translation\Views\View.cshtml"
    }
    else
    {

        using (Html.BeginForm((TranslationController tc) => tc.SaveView(assembly.GetName().Name, culture == null ? null : culture.Name, filter)))
        {
                

            
            #line default
            #line hidden
WriteLiteral("    <table");

WriteLiteral(" id=\"results\"");

WriteLiteral(" style=\"width: 100%; margin: 0px\"");

WriteLiteral(" class=\"st\"");

WriteAttribute("pluralAndGender", Tuple.Create(" pluralAndGender=\"", 1985), Tuple.Create("\"", 2066)
            
            #line 56 "..\..\Translation\Views\View.cshtml"
     , Tuple.Create(Tuple.Create("", 2003), Tuple.Create<System.Object, System.Int32>(Url.Action((TranslationController tc) => tc.PluralAndGender())
            
            #line default
            #line hidden
, 2003), false)
);

WriteLiteral(">\r\n");

            
            #line 57 "..\..\Translation\Views\View.cshtml"
        
            
            #line default
            #line hidden
            
            #line 57 "..\..\Translation\Views\View.cshtml"
         foreach (var defaultLocType in types)
        {
            bool hasDescription = defaultLocType.Options.IsSet(DescriptionOptions.Description);

            bool hasPlural = defaultLocType.Options.IsSet(DescriptionOptions.PluralDescription);

            bool hasGenderOption = defaultLocType.Options.IsSet(DescriptionOptions.Gender);

            bool hasMembers = defaultLocType.Options.IsSet(DescriptionOptions.Members);  
                  

            
            #line default
            #line hidden
WriteLiteral("            <thead>\r\n                <tr>\r\n                    <th");

WriteLiteral(" class=\"leftCell\"");

WriteLiteral(">");

            
            #line 69 "..\..\Translation\Views\View.cshtml"
                                    Write(TranslationMessage.Type.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("</th>\r\n                    <th");

WriteLiteral(" colspan=\"4\"");

WriteLiteral(" class=\"titleCell\"");

WriteLiteral(">");

            
            #line 70 "..\..\Translation\Views\View.cshtml"
                                                 Write(defaultLocType.Type.Name);

            
            #line default
            #line hidden
WriteLiteral(" (");

            
            #line 70 "..\..\Translation\Views\View.cshtml"
                                                                             Write("/".Combine(hasDescription ? "Singular" : null, hasPlural ? "Plural" : null, hasGenderOption ? "Gender" : null, hasMembers ? "Members" : null));

            
            #line default
            #line hidden
WriteLiteral(")</th>\r\n                </tr>\r\n            </thead>\r\n");

            
            #line 73 "..\..\Translation\Views\View.cshtml"
            
            if (defaultLocType.Options.IsSet(DescriptionOptions.Description))
            {
                foreach (var locType in Model.Values.Select(la => la.Types[defaultLocType.Type])
                    .Where(lt => editCulture(lt.Assembly.Culture) || lt.Description.HasText())
                    .Where(lt => all || lt.ContainsDescription(filter)))
                {
                    bool hasGender = hasGenderOption && NaturalLanguageTools.HasGenders(locType.Assembly.Culture);


            
            #line default
            #line hidden
WriteLiteral("            <tr>\r\n                <th");

WriteLiteral(" class=\"leftCell\"");

WriteLiteral(">");

            
            #line 83 "..\..\Translation\Views\View.cshtml"
                                Write(locType.Assembly.Culture.Name);

            
            #line default
            #line hidden
WriteLiteral("</th>\r\n                <th");

WriteLiteral(" class=\"smallCell monospaceCell\"");

WriteLiteral(">\r\n");

            
            #line 85 "..\..\Translation\Views\View.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 85 "..\..\Translation\Views\View.cshtml"
                     if (hasGender)
                    {
                        if (editCulture(locType.Assembly.Culture))
                        {
                            var gd = NaturalLanguageTools.GenderDetectors.TryGetC(locType.Assembly.Culture.TwoLetterISOLanguageName);

                            var list = gd.Try(a => a.Pronoms).EmptyIfNull()
                             .Select(pi => new SelectListItem { Value = pi.Gender.ToString(), Text = pi.Singular, Selected = pi.Gender == locType.Gender }).ToList();

                            if (locType.Gender == null)
                            {
                                list.Insert(0, new SelectListItem { Value = "", Text = "-", Selected = true });
                            }
                        
            
            #line default
            #line hidden
            
            #line 98 "..\..\Translation\Views\View.cshtml"
                   Write(Html.DropDownList(locKey(locType) + ".Gender", list));

            
            #line default
            #line hidden
            
            #line 98 "..\..\Translation\Views\View.cshtml"
                                                                             ;
                        }
                        else
                        {
                        
            
            #line default
            #line hidden
            
            #line 102 "..\..\Translation\Views\View.cshtml"
                    Write(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: false, culture: locType.Assembly.Culture) : "-");

            
            #line default
            #line hidden
            
            #line 102 "..\..\Translation\Views\View.cshtml"
                                                                                                                                                                
                        }
                    }

            
            #line default
            #line hidden
WriteLiteral("                </th>\r\n                <th");

WriteLiteral(" class=\"monospaceCell\"");

WriteLiteral(">\r\n");

            
            #line 107 "..\..\Translation\Views\View.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 107 "..\..\Translation\Views\View.cshtml"
                     if (editCulture(locType.Assembly.Culture))
                    {
                        
            
            #line default
            #line hidden
            
            #line 109 "..\..\Translation\Views\View.cshtml"
                   Write(Html.TextArea(locKey(locType) + ".Description", locType.Description, new { style = "width:90%;height:16px" }));

            
            #line default
            #line hidden
            
            #line 109 "..\..\Translation\Views\View.cshtml"
                                                                                                                                      
                    }
                    else
                    {
                        
            
            #line default
            #line hidden
            
            #line 113 "..\..\Translation\Views\View.cshtml"
                   Write(locType.Description);

            
            #line default
            #line hidden
            
            #line 113 "..\..\Translation\Views\View.cshtml"
                                               
                    }

            
            #line default
            #line hidden
WriteLiteral("                </th>\r\n                <th");

WriteLiteral(" class=\"smallCell\"");

WriteLiteral(">\r\n");

            
            #line 117 "..\..\Translation\Views\View.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 117 "..\..\Translation\Views\View.cshtml"
                     if (hasPlural && hasGender)
                    {
                        
            
            #line default
            #line hidden
            
            #line 119 "..\..\Translation\Views\View.cshtml"
                    Write(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: true, culture: locType.Assembly.Culture) : "-");

            
            #line default
            #line hidden
            
            #line 119 "..\..\Translation\Views\View.cshtml"
                                                                                                                                                               
                    }

            
            #line default
            #line hidden
WriteLiteral("                </th>\r\n                <th");

WriteLiteral(" class=\"monospaceCell\"");

WriteLiteral(">\r\n");

            
            #line 123 "..\..\Translation\Views\View.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 123 "..\..\Translation\Views\View.cshtml"
                     if (hasPlural)
                    {
                        if (editCulture(locType.Assembly.Culture))
                        {
                        
            
            #line default
            #line hidden
            
            #line 127 "..\..\Translation\Views\View.cshtml"
                   Write(Html.TextArea(locKey(locType) + ".PluralDescription", locType.PluralDescription, new { style = "width:90%;height:16px" }));

            
            #line default
            #line hidden
            
            #line 127 "..\..\Translation\Views\View.cshtml"
                                                                                                                                                     
                        }
                        else
                        {    
                        
            
            #line default
            #line hidden
            
            #line 131 "..\..\Translation\Views\View.cshtml"
                   Write(locType.PluralDescription);

            
            #line default
            #line hidden
            
            #line 131 "..\..\Translation\Views\View.cshtml"
                                                  
                        }
                    }

            
            #line default
            #line hidden
WriteLiteral("                </th>\r\n            </tr>\r\n");

            
            #line 136 "..\..\Translation\Views\View.cshtml"
                }
            }


            if (defaultLocType.Options.IsSet(DescriptionOptions.Members))
            {
                foreach (string key in defaultLocType.Members.Keys.Where(k => all || k.Contains(filter, StringComparison.InvariantCultureIgnoreCase) ||
                    Model.Values.Select(la => la.Types[defaultLocType.Type]).Any(t => t.Members.ContainsKey(k) && t.Members[k].Contains(filter, StringComparison.InvariantCultureIgnoreCase))))
                {

            
            #line default
            #line hidden
WriteLiteral("            <tr>\r\n                <th");

WriteLiteral(" class=\"leftCell\"");

WriteLiteral(">");

            
            #line 146 "..\..\Translation\Views\View.cshtml"
                                Write(TranslationMessage.Member.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("\r\n                </th>\r\n                <th");

WriteLiteral(" colspan=\"4\"");

WriteLiteral(">");

            
            #line 148 "..\..\Translation\Views\View.cshtml"
                            Write(key);

            
            #line default
            #line hidden
WriteLiteral("\r\n                </th>\r\n            </tr>\r\n");

            
            #line 151 "..\..\Translation\Views\View.cshtml"
            
                    foreach (var locType in Model.Values.Select(la => la.Types[defaultLocType.Type]).Where(lt => editCulture(lt.Assembly.Culture) || lt.Members.ContainsKey(key)))
                    {

            
            #line default
            #line hidden
WriteLiteral("            <tr>\r\n                <td");

WriteLiteral(" class=\"leftCell\"");

WriteLiteral(">");

            
            #line 155 "..\..\Translation\Views\View.cshtml"
                                Write(locType.Assembly.Culture.Name);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                <td");

WriteLiteral(" colspan=\"4\"");

WriteLiteral(" class=\"monospaceCell\"");

WriteLiteral(">\r\n\r\n");

            
            #line 158 "..\..\Translation\Views\View.cshtml"
                    
            
            #line default
            #line hidden
            
            #line 158 "..\..\Translation\Views\View.cshtml"
                     if (editCulture(locType.Assembly.Culture))
                    {
                        
            
            #line default
            #line hidden
            
            #line 160 "..\..\Translation\Views\View.cshtml"
                   Write(Html.TextArea(locKey(locType) + ".Member." + key, locType.Members.TryGetC(key), new { style = "width:90%;height:16px" }));

            
            #line default
            #line hidden
            
            #line 160 "..\..\Translation\Views\View.cshtml"
                                                                                                                                                 
                    }
                    else
                    {
                        
            
            #line default
            #line hidden
            
            #line 164 "..\..\Translation\Views\View.cshtml"
                   Write(locType.Members.TryGetC(key));

            
            #line default
            #line hidden
            
            #line 164 "..\..\Translation\Views\View.cshtml"
                                                     
                    }

            
            #line default
            #line hidden
WriteLiteral("                </td>\r\n            </tr>\r\n");

            
            #line 168 "..\..\Translation\Views\View.cshtml"
                    }
                }
            }
        }

            
            #line default
            #line hidden
WriteLiteral("    </table>\r\n");

WriteLiteral("    <input");

WriteLiteral(" type=\"submit\"");

WriteAttribute("value", Tuple.Create(" value=\"", 7704), Tuple.Create("\"", 7751)
            
            #line 173 "..\..\Translation\Views\View.cshtml"
, Tuple.Create(Tuple.Create("", 7712), Tuple.Create<System.Object, System.Int32>(TranslationMessage.Save.NiceToString()
            
            #line default
            #line hidden
, 7712), false)
);

WriteLiteral(" />\r\n");

            
            #line 174 "..\..\Translation\Views\View.cshtml"
        }
    }
}

            
            #line default
            #line hidden
        }
    }
}
#pragma warning restore 1591
